import{_ as p,c as e,a as s,e as t,d as l,b as o,r as c,o as i}from"./app-DOK2Wtno.js";const u={},r={href:"https://leetcode.cn/problems/longest-palindromic-substring/description/",target:"_blank",rel:"noopener noreferrer"};function k(d,n){const a=c("ExternalLinkIcon");return i(),e("div",null,[s("blockquote",null,[s("p",null,[s("a",r,[n[0]||(n[0]=l("最长回文子串")),o(a)])])]),n[1]||(n[1]=t(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：s = &quot;babad&quot;</span>
<span class="line">输出：&quot;bab&quot;</span>
<span class="line"></span>
<span class="line">输入：s = &quot;cbbd&quot;</span>
<span class="line">输出：&quot;bb&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="中心扩展法" tabindex="-1"><a class="header-anchor" href="#中心扩展法"><span>中心扩展法</span></a></h3><p>中心扩展法的思想是：以每个字符（单个字符或两个连续字符）为中心，向两边扩展，直到不再是回文为止。</p><p><strong>实现步骤</strong>：</p><ol><li>遍历每个字符，将其作为中心</li><li>对于每个中心，分别扩展奇数长度和偶数长度的回文</li><li>记录最长的回文子串</li></ol><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">expandAroundCenter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> lk<span class="token punctuation">,</span> rk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>lk <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rk <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>lk<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>rk<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">--</span>lk<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>rk<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>lk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> lp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>lk1<span class="token punctuation">,</span> rk1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">expandAround</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>lk2<span class="token punctuation">,</span> rk2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">expandAround</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> palindrome1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lk1<span class="token punctuation">,</span> rk1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> palindrome2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lk2<span class="token punctuation">,</span> rk2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>palindrome1<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> lp<span class="token punctuation">.</span>length<span class="token punctuation">)</span> lp <span class="token operator">=</span> palindrome1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>palindrome2<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> lp<span class="token punctuation">.</span>length<span class="token punctuation">)</span> lp <span class="token operator">=</span> palindrome2<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> lp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,10))])}const v=p(u,[["render",k],["__file","5.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/5.html","title":"LeetCode 「中等」5.最长回文子串","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」5.最长回文子串","date":"2025-2-21","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"中心扩展法","slug":"中心扩展法","link":"#中心扩展法","children":[]}]}],"git":{"createdTime":1740129816000,"updatedTime":1742484209000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":6}]},"filePathRelative":"blogs/algorithm/leetcode/5.md"}');export{v as comp,b as data};
