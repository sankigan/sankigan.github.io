import{_ as e,c as t,a as s,e as p,d as c,b as l,r as o,o as i}from"./app-DOK2Wtno.js";const u={},d={href:"https://leetcode.cn/problems/permutations/description/",target:"_blank",rel:"noopener noreferrer"};function r(k,n){const a=o("ExternalLinkIcon");return i(),t("div",null,[s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=c("全排列")),l(a)])])]),n[1]||(n[1]=p(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其所有可能的全排列 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：nums = [1,2,3]</span>
<span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span>
<span class="line"></span>
<span class="line">输入：nums = [0,1]</span>
<span class="line">输出：[[0,1],[1,0]]</span>
<span class="line"></span>
<span class="line">输入：nums = [1]</span>
<span class="line">输出：[[1]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法"><span>回溯法</span></a></h3><ol><li>定义问的解空间</li></ol><p>对于数组 <code>[1, 2, 3]</code>，解空间是它的所有可能排列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[</span>
<span class="line">  [1, 2, 3],</span>
<span class="line">  [1, 3, 2],</span>
<span class="line">  [2, 1, 3],</span>
<span class="line">  [2, 3, 1],</span>
<span class="line">  [3, 1, 2],</span>
<span class="line">  [3, 2, 1],</span>
<span class="line">]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>递归构建解</li></ol><ul><li>初始状态：<code>path = []</code>，<code>options = [1, 2, 3]</code></li><li>选择第一个数字 <code>1</code>，加入 <code>path</code>，<code>path = [1]</code>，<code>options = [2, 3]</code></li><li>递归调用，选择第二个数字 <code>2</code>，<code>path = [1, 2]</code>，<code>options = [3]</code></li><li>递归调用，选择第三个数字 <code>3</code>，<code>path = [1, 2, 3]</code>，<code>options = []</code></li><li>此时 <code>path</code> 的长度等于数组的常读，找到一个解 <code>[1, 2, 3]</code>，加入结果集合</li></ul><ol start="3"><li>回溯</li></ol><ul><li>回溯到上一步，撤销选择 <code>3</code>，<code>path = [1, 2]</code>，<code>options = [3]</code></li><li>由于 <code>options</code> 中没有其他数字可选，继续回溯到上一步，撤销选择 <code>2</code>,<code>path = [1]</code>，<code>options = [2, 3]</code></li><li>选择下一个数字 <code>3</code>，<code>path = [1, 3]</code>，<code>options = [2]</code></li><li>继续递归，选择 <code>2</code>，<code>path = [1, 3, 2]</code>，找到另一个解</li></ul><ol start="4"><li>重复上述过程</li></ol><p>通过不断选择、递归和回溯，最终找到所有可能的排列</p><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> newOptions <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> newOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回溯</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> ans<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,16))])}const v=e(u,[["render",r],["__file","46.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/46.html","title":"LeetCode 「中等」46.全排列","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」46.全排列","date":"2025-2-18","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"回溯法","slug":"回溯法","link":"#回溯法","children":[]}]}],"git":{"createdTime":1739887649000,"updatedTime":1742484209000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":3},{"name":"sankigan","email":"sankigan@tencent.com","commits":2}]},"filePathRelative":"blogs/algorithm/leetcode/46.md"}');export{v as comp,b as data};
