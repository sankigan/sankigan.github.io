import{_ as e,c as t,a as s,e as l,d as p,b as c,r as i,o}from"./app-DOK2Wtno.js";const u={},r={href:"https://leetcode.cn/problems/generate-parentheses/description/",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=i("ExternalLinkIcon");return o(),t("div",null,[s("blockquote",null,[s("p",null,[s("a",r,[n[0]||(n[0]=p("括号生成")),c(a)])])]),n[1]||(n[1]=l(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：n = 3</span>
<span class="line">输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span>
<span class="line"></span>
<span class="line">输入：n = 1</span>
<span class="line">输出：[&quot;()&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="关键思路" tabindex="-1"><a class="header-anchor" href="#关键思路"><span>关键思路</span></a></h3><ol><li>有效性条件</li></ol><ul><li>有效的括号组合必须满足：每个右括号 <code>)</code> 都有一个对应的左括号 <code>(</code>，并且右括号不能出现在左括号之前</li><li>在生成过程中，我们需要确保： <ul><li>左括号的数量不能超过 <code>n</code></li><li>右括号的数量不能超过左括号的数量</li></ul></li></ul><ol start="2"><li>回溯法</li></ol><ul><li>使用<strong>递归回溯法</strong>来生成所有可能的括号组合</li><li>在递归过程中，逐步添加左括号 <code>(</code> 和右括号 <code>)</code>，并确保满足有效性条件</li></ul><ol start="3"><li>递归终止条件</li></ol><ul><li>当左括号和右括号的数量都达到 <code>n</code> 时，生成了一个有效的括号组合，将其加入结果列表</li></ul><h3 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h3><ol><li>定义递归函数</li></ol><ul><li>递归函数需要记录当前生成的括号字符串、左括号的数量和右括号的数量</li></ul><ol start="2"><li>递归逻辑</li></ol><ul><li>如果左括号的数量小于 <code>n</code>，可以添加一个左括号 <code>(</code>，并递归</li><li>如果右括号的数量小于左括号的数量，可以添加一个右括号 <code>)</code>，并递归</li></ul><ol start="3"><li>剪枝</li></ol><ul><li>如果左括号或右括号的数量超过了限制，直接返回</li></ul><ol start="4"><li>终止条件：</li></ol><ul><li>如果左括号和右括号的数量都等于 <code>n</code>，将当前字符串加入结果列表</li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">generateParenthesis</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果左括号和右括号的数量都达到 n，生成了一个有效组合</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> n <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果左括号的数量小于 n，可以添加一个左括号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">backtrack</span><span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果右括号的数量小于左括号的数量，可以添加一个右括号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">backtrack</span><span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 从空字符串开始，左括号和右括号的数量都为 0</span></span>
<span class="line">  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,22))])}const v=e(u,[["render",d],["__file","22.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/22.html","title":"LeetCode 「中等」22.括号生成","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」22.括号生成","date":"2025-3-4","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"关键思路","slug":"关键思路","link":"#关键思路","children":[]},{"level":3,"title":"具体步骤","slug":"具体步骤","link":"#具体步骤","children":[]}]}],"git":{"createdTime":1741074418000,"updatedTime":1742484209000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":6}]},"filePathRelative":"blogs/algorithm/leetcode/22.md"}');export{v as comp,b as data};
