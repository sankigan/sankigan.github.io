import{_ as e,c as l,a as s,e as t,d as p,b as i,r as c,o}from"./app-DOK2Wtno.js";const r={},d={href:"https://leetcode.cn/problems/reverse-linked-list/description/",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const a=c("ExternalLinkIcon");return o(),l("div",null,[s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=p("反转链表")),i(a)])])]),n[1]||(n[1]=t(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：head = [1,2,3,4,5]</span>
<span class="line">输出：[5,4,3,2,1]</span>
<span class="line"></span>
<span class="line">输入：head = [1,2]</span>
<span class="line">输出：[2,1]</span>
<span class="line"></span>
<span class="line">输入：head = []</span>
<span class="line">输出：[]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代"><span>迭代</span></a></h3><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Definition for singly-linked list.</span>
<span class="line"> * function ListNode(val, next) <span class="token punctuation">{</span></span>
<span class="line"> *     this.val = (val===undefined ? 0 : val)</span>
<span class="line"> *     this.next = (next===undefined ? null : next)</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> temp <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span></span>
<span class="line">    prev <span class="token operator">=</span> curr<span class="token punctuation">;</span></span>
<span class="line">    curr <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> prev<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h3><p>递归的关键在于反向工作，假设链表的其余部分已经被反转，现在该如何反转它前面的部分？</p><p>假设链表为：</p><p><code>n(1) → ... → n(k-1) → n(k) → n(k+1) → ... → n(m)</code></p><p>若从节点 <code>n(k+1)</code> 到 <code>n(m)</code> 已经被反转，而我们正处于 <code>n(k)</code>：</p><p><code>n(1) → ... → n(k-1) → n(k) → n(k+1) ← ... ← n(m)</code></p><p>我们希望 <code>n(k+1)</code> 的下一个节点指向 <code>n(k)</code>，所以 <code>n(k).next.next = n(k)</code></p><p>需要注意的是 <code>n(1)</code> 的下一个节点必须指向 <code>null</code>。如果忽略了这一点，链表中可能会产生环</p><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> head<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> newHead<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,16))])}const m=e(r,[["render",u],["__file","206.html.vue"]]),h=JSON.parse('{"path":"/blogs/algorithm/leetcode/206.html","title":"LeetCode 「简单」206.反转链表","lang":"zh-CN","frontmatter":{"title":"LeetCode 「简单」206.反转链表","date":"2025-2-18","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"迭代","slug":"迭代","link":"#迭代","children":[]},{"level":3,"title":"递归","slug":"递归","link":"#递归","children":[]}]}],"git":{"createdTime":1739887649000,"updatedTime":1742484209000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":3},{"name":"sankigan","email":"sankigan@tencent.com","commits":2}]},"filePathRelative":"blogs/algorithm/leetcode/206.md"}');export{m as comp,h as data};
