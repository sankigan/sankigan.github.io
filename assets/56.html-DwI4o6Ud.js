import{_ as e,c as t,a as s,e as p,d as l,b as c,r as o,o as i}from"./app-DOK2Wtno.js";const u={},r={href:"https://leetcode.cn/problems/merge-intervals/description/",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=o("ExternalLinkIcon");return i(),t("div",null,[s("blockquote",null,[s("p",null,[s("a",r,[n[0]||(n[0]=l("合并区间")),c(a)])])]),n[1]||(n[1]=p(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：intervals = [[1,3],[2,6],[8,10],[15,18]]</span>
<span class="line">输出：[[1,6],[8,10],[15,18]]</span>
<span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span>
<span class="line"></span>
<span class="line">输入：intervals = [[1,4],[4,5]]</span>
<span class="line">输出：[[1,5]]</span>
<span class="line">解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h3><ol><li>排序区间</li></ol><ul><li>将所有区间按照<strong>起始位置</strong>进行排序。这样可以让相邻的区间更容易判断是否重叠</li></ul><ol start="2"><li>初始化结果数组</li></ol><ul><li>创建一个空数组 <code>result</code>，用于存储合并后的区间</li><li>将排序后的第一个区间直接加入 <code>result</code>，作为当前区间</li></ul><ol start="3"><li>遍历区间</li></ol><ul><li>从第二个区间开始遍历排序后的区间列表</li><li>对于每个区间，检查它是否与 <code>result</code> 中的最后一个区间重叠： <ul><li>如果<strong>当前区间的起始位置 &lt;= <code>result</code> 中最后一个区间的结束位置</strong>，说明两个区间重叠，需要合并</li><li>合并的方式是更新 <code>result</code> 中的最后一个区间的结束位置为 <code>max(result[result.length - 1][1], 当前区间的结束位置)</code></li><li>如果当前区间不与 <code>result</code> 中的最后一个区间重叠，则直接将当前区间加入 <code>result</code></li></ul></li></ul><ol start="4"><li>返回结果</li></ol><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">intervals</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 按起始位置排序</span></span>
<span class="line">  intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 初始化结果数组</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 遍历区间</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> currentInterval <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 缓存最后一个区间</span></span>
<span class="line">    <span class="token keyword">const</span> lastInterval <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 检查是否重叠</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> lastInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 合并区间</span></span>
<span class="line">      lastInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>currentInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lastInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 不重叠，直接加入结果</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentInterval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,14))])}const v=e(u,[["render",d],["__file","56.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/56.html","title":"LeetCode 「中等」56.合并区间","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」56.合并区间","date":"2025-3-6","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"具体步骤","slug":"具体步骤","link":"#具体步骤","children":[]}]}],"git":{"createdTime":1741262459000,"updatedTime":1741269556000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":2}]},"filePathRelative":"blogs/algorithm/leetcode/56.md"}');export{v as comp,b as data};
