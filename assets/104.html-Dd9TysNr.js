import{_ as e,c as l,a as s,e as t,d as p,b as i,r as c,o}from"./app-DOK2Wtno.js";const u={},r={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=c("ExternalLinkIcon");return o(),l("div",null,[s("blockquote",null,[s("p",null,[s("a",r,[n[0]||(n[0]=p("二叉树的最大深度")),i(a)])])]),n[1]||(n[1]=t(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p><p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：root = [3,9,20,null,null,15,7]</span>
<span class="line">输出：3</span>
<span class="line"></span>
<span class="line">输入：root = [1,null,2]</span>
<span class="line">输出：2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="迭代-广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#迭代-广度优先搜索-bfs"><span>迭代（广度优先搜索，BFS）</span></a></h3><h4 id="关键思路" tabindex="-1"><a class="header-anchor" href="#关键思路"><span>关键思路</span></a></h4><ol><li>定义问题</li></ol><ul><li>二叉树的最大深度是指从根节点到最远叶子节点的最长路径上的节点数</li></ul><ol start="2"><li>迭代逻辑</li></ol><ul><li>使用队列逐层访问树的所有节点</li><li>每访问完一层，深度加 1</li></ul><ol start="3"><li>迭代终止条件</li></ol><ul><li>当队列为空时，所有节点都已访问完毕</li></ul><h4 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h4><ol><li>初始化队列</li></ol><ul><li>将根节点加入队列</li></ul><ol start="2"><li>迭代逻辑</li></ol><ul><li>使用 <code>while</code> 循环，条件是队列不为空</li><li>在每次循环中，记录当前层的节点数量，然后逐个从队列中取出节点，如果节点有左子节点或右子节点，将其加入队列</li></ul><ol start="3"><li>计算深度</li></ol><ul><li>每次完成一层的访问之后，深度加 1</li></ul><ol start="4"><li>返回结果</li></ol><ul><li>当队列为空时，返回计算得到的深度</li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Definition for a binary tree node.</span>
<span class="line"> * function TreeNode(val, left, right) <span class="token punctuation">{</span></span>
<span class="line"> *     this.val = (val===undefined ? 0 : val)</span>
<span class="line"> *     this.left = (left===undefined ? null : left)</span>
<span class="line"> *     this.right = (right===undefined ? null : right)</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 如果根节点为空，直接返回深度为 0</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 使用队列存储待访问的节点</span></span>
<span class="line">  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 用于记录当前深度</span></span>
<span class="line">  <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 当前层的节点数量</span></span>
<span class="line">    <span class="token keyword">const</span> currentSize <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentSize<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 从队列中取出一个节点</span></span>
<span class="line">      <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 如果有左子节点，加入队列</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 如果有右子节点，加入队列</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 每访问完一层，深度加 1</span></span>
<span class="line">    <span class="token operator">++</span>depth<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> depth<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,24))])}const v=e(u,[["render",d],["__file","104.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/104.html","title":"LeetCode 「简单」104.二叉树的最大深度","lang":"zh-CN","frontmatter":{"title":"LeetCode 「简单」104.二叉树的最大深度","date":"2025-3-5","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"迭代（广度优先搜索，BFS）","slug":"迭代-广度优先搜索-bfs","link":"#迭代-广度优先搜索-bfs","children":[]}]}],"git":{"createdTime":1741166257000,"updatedTime":1742483221000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":3}]},"filePathRelative":"blogs/algorithm/leetcode/104.md"}');export{v as comp,b as data};
