import{_ as e,c as t,a as s,e as l,d as o,b as p,r as i,o as c}from"./app-DOK2Wtno.js";const r={},u={href:"https://leetcode.cn/problems/path-sum/description/",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const a=i("ExternalLinkIcon");return c(),t("div",null,[s("blockquote",null,[s("p",null,[s("a",u,[n[0]||(n[0]=o("路径总和")),p(a)])])]),n[1]||(n[1]=l(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>叶子节点是指没有子节点的节点。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span>
<span class="line">输出：true</span>
<span class="line"></span>
<span class="line">输入：root = [1,2,3], targetSum = 5</span>
<span class="line">输出：false</span>
<span class="line"></span>
<span class="line">输入：root = [], targetSum = 0</span>
<span class="line">输出：false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><p>这个问题可以通过深度优先搜索（DFS）来解决。我们需要从根节点开始，沿着每条路径向下遍历，直到到达叶子节点，并检查路径上节点值的和是否等于目标和。</p><p><strong>解题思路</strong></p><ol><li>递归终止条件</li></ol><ul><li>如果当前节点是 <code>null</code>，说明当前路径不存在，返回 <code>false</code></li><li>如果当前节点是叶子节点（即没有左右子节点），检查当前节点的值是否等于剩余的目标和。如果是，返回 <code>true</code>，否则返回 <code>false</code></li></ul><ol start="2"><li>递归逻辑</li></ol><ul><li>从根节点开始，沿着左子树和右子树递归遍历</li><li>每次递归时，将当前节点的值从目标和中减去，并传递给子节点</li><li>如果左子树或右子树的递归结果为 <code>true</code>，说明存在满足条件的路径，返回 <code>true</code></li></ul><ol start="3"><li>返回结果</li></ol><ul><li>如果所有路径都不满足条件，返回 <code>false</code></li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Definition for a binary tree node.</span>
<span class="line"> * function TreeNode(val, left, right) <span class="token punctuation">{</span></span>
<span class="line"> *     this.val = (val===undefined ? 0 : val)</span>
<span class="line"> *     this.left = (left===undefined ? null : left)</span>
<span class="line"> *     this.right = (right===undefined ? null : right)</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">targetSum</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">hasPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> targetSum<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,15))])}const v=e(r,[["render",d],["__file","112.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/112.html","title":"LeetCode 「简单」112.路径总和","lang":"zh-CN","frontmatter":{"title":"LeetCode 「简单」112.路径总和","date":"2025-2-20","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[]}],"git":{"createdTime":1740045536000,"updatedTime":1742484209000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":6}]},"filePathRelative":"blogs/algorithm/leetcode/112.md"}');export{v as comp,b as data};
