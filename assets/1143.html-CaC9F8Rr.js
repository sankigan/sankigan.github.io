import{_ as e,c as t,a as s,e as p,d as o,b as c,r as l,o as i}from"./app-DOK2Wtno.js";const u={},d={href:"https://leetcode.cn/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"};function r(k,n){const a=l("ExternalLinkIcon");return i(),t("div",null,[s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=o("最长公共子序列")),c(a)])])]),n[1]||(n[1]=p(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li></ul><p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot;</span>
<span class="line">输出：3</span>
<span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span>
<span class="line"></span>
<span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;</span>
<span class="line">输出：3</span>
<span class="line">解释：最长公共子序列是 &quot;abc&quot; ，它的长度为 3 。</span>
<span class="line"></span>
<span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;</span>
<span class="line">输出：0</span>
<span class="line">解释：两个字符串没有公共子序列，返回 0 。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h3><h4 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h4><ol><li>定义状态</li></ol><ul><li>使用一个二维数组 <code>dp</code>，其中 <code>dp[i][j]</code> 表示 <code>text1</code> 的前 <code>i</code> 个字符和 <code>text2</code> 的前 <code>j</code> 个字符的最长公共子序列的长度</li></ul><ol start="2"><li>状态转移</li></ol><ul><li>如果 <code>text1[i - 1] === text2[j - 1]</code>，则 <code>dp[i][j] = dp[i - 1][j - 1] + 1</code></li><li>如果 <code>text1[i - 1] !== text2[j - 1]</code>，则 <code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])</code></li></ul><ol start="3"><li>初始化</li></ol><ul><li><code>dp[0][j] = 0</code>，因为 <code>text1</code> 的前 0 个字符和 <code>text2</code> 的前 <code>j</code> 个字符没有公共子序列</li><li><code>dp[i][0] = 0</code>，因为 <code>text1</code> 的前 <code>i</code> 个字符和 <code>text2</code> 的前 0 个字符没有公共子序列</li></ul><ol start="4"><li>计算结果</li></ol><ul><li>遍历 <code>dp</code> 数组，最终 <code>dp[m][n]</code> 就是两个字符串的最长公共子序列的长度</li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">text1</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">text2</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">longestCommonSubsequence</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text1<span class="token punctuation">,</span> text2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> m <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> text2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="状态转移" tabindex="-1"><a class="header-anchor" href="#状态转移"><span>状态转移</span></a></h4><p>在动态规划中，状态转移是根据已知的子问题的解来求解当前问题的过程。对于“最长公共子序列”问题，状态转移的逻辑如下：</p><ol><li>如果 <code>text1[i - 1] === text2[j - 1]</code></li></ol><ul><li>这意味着 <code>text1</code> 的第 <code>i</code> 个字符和 <code>text2</code> 的第 <code>j</code> 个字符相同，因此他们可以作为公共子序列的一部分</li><li>在这种情况下，<code>dp[i][j]</code> 的值等于 <code>dp[i - 1][j - 1] + 1</code>，因为我们可以将这个相同的字符添加到 <code>text1</code> 和前 <code>i - 1</code> 个字符和 <code>text2</code> 的前 <code>j - 1</code> 个字符的最长公共子序列的末尾</li></ul><ol start="2"><li>如果 <code>text1[i - 1] !== text2[j - 1]</code></li></ol><ul><li>这意味着 <code>text1</code> 的第 <code>i</code> 个字符和 <code>text2</code> 的第 <code>j</code> 个字符不同，因此他们不能同时作为公共子序列的一部分</li><li>在这种情况下，<code>dp[i][j]</code> 的值等于 <code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code> 中的较大值，因为我们可以选择忽略 <code>text1</code> 的第 <code>i</code> 个字符或 <code>text2</code> 的第 <code>j</code> 个字符，然后取剩余部分的最长公共子序列的长度</li></ul>`,25))])}const v=e(u,[["render",r],["__file","1143.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/1143.html","title":"LeetCode 「中等」1143.最长公共子序列","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」1143.最长公共子序列","date":"2025-3-12","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]}]}],"git":{"createdTime":1741699363000,"updatedTime":1742914687000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":5}]},"filePathRelative":"blogs/algorithm/leetcode/1143.md"}');export{v as comp,b as data};
