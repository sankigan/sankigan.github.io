import{_ as e,c as l,a as s,e as t,d as c,b as o,r as p,o as i}from"./app-DOK2Wtno.js";const d={},r={href:"https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/description/",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const a=p("ExternalLinkIcon");return i(),l("div",null,[s("blockquote",null,[s("p",null,[s("a",r,[n[0]||(n[0]=c("训练计划 II")),o(a)])])]),n[1]||(n[1]=t(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个头节点为 <code>head</code> 的链表用于记录一系列核心肌群训练项目编号，请查找并返回倒数第 <code>cnt</code> 个训练项目编号。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：head = [2,4,7,8], cnt = 1</span>
<span class="line">输出：8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="双指针法" tabindex="-1"><a class="header-anchor" href="#双指针法"><span>双指针法</span></a></h3><h4 id="关键思路" tabindex="-1"><a class="header-anchor" href="#关键思路"><span>关键思路</span></a></h4><p>双指针法的核心思想是使用两个指针，<code>fast</code> 和 <code>slow</code>，他们之间的距离始终保持为 <code>cnt</code>。当 <code>fast</code> 指针到达链表末尾时，<code>slow</code> 指针刚好指向倒数第 <code>cnt</code> 个节点。</p><h4 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h4><ol><li>初始化指针</li></ol><ul><li>初始化两个指针 <code>fast</code> 和 <code>slow</code>，都指向链表的头节点 <code>head</code></li></ul><ol start="2"><li>移动 <code>fast</code> 指针</li></ol><ul><li>将 <code>fast</code> 指针向前移动 <code>cnt</code> 步。如果在移动过程中 <code>fast</code> 指针提前到达链表末尾（即 <code>fast</code> 变为 <code>null</code>），说明链表长度小于 <code>cnt</code>，直接返回 <code>null</code></li></ul><ol start="3"><li>同时移动两个指针</li></ol><ul><li>当 <code>fast</code> 指针到达链表末尾时，<code>slow</code> 指针将指向倒数第 <code>cnt</code> 个节点</li><li>在移动过程中，每次将 <code>fast</code> 和 <code>slow</code> 指针同时向前移动一步，直到 <code>fast</code> 指针到达链表末尾</li></ul><ol start="4"><li>返回结果</li></ol><ul><li>当 <code>fast</code> 指针到达链表末尾时，<code>slow</code> 指针所指向的节点即为倒数第 <code>cnt</code> 个节点</li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Definition for singly-linked list.</span>
<span class="line"> * function ListNode(val, next) <span class="token punctuation">{</span></span>
<span class="line"> *     this.val = (val===undefined ? 0 : val)</span>
<span class="line"> *     this.next = (next===undefined ? null : next)</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">cnt</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">trainingPlan</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> cnt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 先将 fast 指针向前移动 cnt 步</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果链表长度小于 cnt，返回 null</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 同时移动 fast 和 slow 指针，直到 fast 到达链表末尾</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 此时 slow 指针指向倒数第 cnt 个节点</span></span>
<span class="line">  <span class="token keyword">return</span> slow<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,18))])}const v=e(d,[["render",u],["__file","LCR140.html.vue"]]),h=JSON.parse('{"path":"/blogs/algorithm/leetcode/LCR140.html","title":"LeetCode 「简单」LCR140.训练计划 II","lang":"zh-CN","frontmatter":{"title":"LeetCode 「简单」LCR140.训练计划 II","date":"2025-3-5","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"双指针法","slug":"双指针法","link":"#双指针法","children":[]}]}],"git":{"createdTime":1741166257000,"updatedTime":1741166408000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":2}]},"filePathRelative":"blogs/algorithm/leetcode/LCR140.md"}');export{v as comp,h as data};
