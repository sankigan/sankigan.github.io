import{_ as e,c as p,a as s,e as l,d as t,b as c,r as o,o as i}from"./app-DOK2Wtno.js";const r={},d={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/description/",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const a=o("ExternalLinkIcon");return i(),p("div",null,[s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=t("K 个一组翻转链表")),c(a)])])]),n[1]||(n[1]=l(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。 8 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入：head = [1,2,3,4,5], k = 2</span>
<span class="line">输出：[2,1,4,3,5]</span>
<span class="line"></span>
<span class="line">输入：head = [1,2,3,4,5], k = 3</span>
<span class="line">输出：[3,2,1,4,5]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h3><ol><li>边界条件处理</li></ol><ul><li>如果链表为空或 <code>K</code> 小于等于 1，直接返回原链表</li><li>如果链表长度小于 <code>K</code>，直接返回原链表</li></ul><ol start="2"><li>翻转 <code>K</code> 个节点</li></ol><ul><li>使用一个指针遍历链表，找到第 <code>K</code> 个节点</li><li>翻转从当前节点到第 <code>K</code> 个节点之间的链表</li><li>保存翻转后的子链表的头节点和尾节点</li></ul><ol start="3"><li>递归或循环处理剩余部分</li></ol><ul><li>将翻转后的子链表的尾节点连接到下一个子链表的头节点</li><li>递归或循环处理剩余的链表部分，直到整个链表处理完毕</li></ul><ol start="4"><li>返回结果</li></ol><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Definition for singly-linked list.</span>
<span class="line"> * function ListNode(val, next) <span class="token punctuation">{</span></span>
<span class="line"> *     this.val = (val===undefined ? 0 : val)</span>
<span class="line"> *     this.next = (next===undefined ? null : next)</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token comment">// 用于翻转从 head 开始的 K 个节点</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">reverseKNodes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 如果不足 K 个节点，返回 null</span></span>
<span class="line">    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 保存下一个节点</span></span>
<span class="line">    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span> <span class="token comment">// 翻转当前节点</span></span>
<span class="line">    prev <span class="token operator">=</span> curr<span class="token punctuation">;</span> <span class="token comment">// 移动 prev 到当前节点</span></span>
<span class="line">    curr <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token comment">// 移动 curr 到下一个节点</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  head<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">;</span> <span class="token comment">// 连接翻转后的子链表的尾节点到下一个子链表的头节点</span></span>
<span class="line">  <span class="token keyword">return</span> prev<span class="token punctuation">;</span> <span class="token comment">// 返回翻转后的子链表的头节点</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseKGroup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token function">reverseKNodes</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>newHead<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归处理剩余部分</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> newHead <span class="token operator">||</span> head<span class="token punctuation">;</span> <span class="token comment">// 如果没有翻转，返回原链表</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>详细解释递归操作：</p><ol><li>翻转当前组</li></ol><p>在 <code>reverseKGroup</code> 函数中，首先调用 <code>reverseKNodes</code> 函数来翻转当前的 K 个节点。这个函数会返回<strong>翻转后的子链表的头节点</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> newHead <span class="token operator">=</span> <span class="token function">reverseKNodes</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果 <code>newHead</code> 为 <code>null</code>，说明当前组的长度不足 K，不需要翻转，直接返回原链表</li><li>如果 <code>newHead</code> 不为 <code>null</code>，说明当前组已经成功翻转</li></ul><ol start="2"><li>递归处理下一组</li></ol><p>翻转当前组后，需要处理剩余的链表。递归调用 <code>reverseKGroup</code> 处理剩余的链表部分</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>head</code> 是翻转后当前组的尾节点（原头节点）</li><li><code>reverseKGroup(head.next, k)</code> 递归调用处理剩余的链表部分，返回翻转后的下一组链表的头节点</li><li>将当前组的尾节点连接到下一组的头节点</li></ul><ol start="3"><li>返回结果</li></ol><p>最后，返回翻转后的链表的头节点</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">return</span> newHead <span class="token operator">||</span> head<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果 <code>newHead</code> 不为 <code>null</code>，返回翻转后的链表的头节点</li><li>如果 <code>newHead</code> 为 <code>null</code>，说明当前组没有翻转，返回原链表的头节点</li></ul>`,28))])}const m=e(r,[["render",u],["__file","25.html.vue"]]),b=JSON.parse('{"path":"/blogs/algorithm/leetcode/25.html","title":"LeetCode 「困难」25.K 个一组翻转链表","lang":"zh-CN","frontmatter":{"title":"LeetCode 「困难」25.K 个一组翻转链表","date":"2025-3-10","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]}]}],"git":{"createdTime":1741618551000,"updatedTime":1741680291000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":2}]},"filePathRelative":"blogs/algorithm/leetcode/25.md"}');export{m as comp,b as data};
