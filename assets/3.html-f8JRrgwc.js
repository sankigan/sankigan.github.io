import{_ as e,c as l,a as s,e as t,d as p,b as c,r as i,o}from"./app-DOK2Wtno.js";const r={},u={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=i("ExternalLinkIcon");return o(),l("div",null,[s("blockquote",null,[s("p",null,[s("a",u,[n[0]||(n[0]=p("无重复字符的最长子串")),c(a)])])]),n[1]||(n[1]=t(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个字符串<code>s</code>，请你找出其中不含有重复字符的 最长子串的长度。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">输入: s = &quot;abcabcbb&quot;</span>
<span class="line">输出: 3</span>
<span class="line"></span>
<span class="line">输入: s = &quot;bbbbb&quot;</span>
<span class="line">输出: 1</span>
<span class="line"></span>
<span class="line">输入: s = &quot;pwwkew&quot;</span>
<span class="line">输出: 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h2><h3 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h3><h4 id="关键思路" tabindex="-1"><a class="header-anchor" href="#关键思路"><span>关键思路</span></a></h4><ol><li>滑动窗口</li></ol><ul><li>使用滑动窗口来维护一个不含有重复字符的子串</li><li>滑动窗口的左右边界分别用两个指针 <code>left</code> 和 <code>right</code> 表示</li></ul><ol start="2"><li>哈希表</li></ol><ul><li>使用一个哈希表（<code>Map</code> 或对象）来记录每个字符最近一次出现的位置</li><li>这样可以快速判断当前字符是否已经在窗口中出现过</li></ul><ol start="3"><li>移动窗口</li></ol><ul><li>遍历字符串，每次将右边界 <code>right</code> 向右移动一位</li><li>如果当前字符已经在窗口中出现过，将左边界 <code>left</code> 移动到该字符上次出现位置的右边</li><li>更新当前字符的最新位置</li><li>记录当前窗口的长度，更新最长子串的长度</li></ul><h4 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h4><ol><li>初始化</li></ol><ul><li>初始化左边界 <code>left</code> 为 0</li><li>初始化一个哈希表 <code>charIndex</code> 用于记录字符的最新位置</li><li>初始化最长子串长度 <code>maxLength</code> 为 0</li></ul><ol start="2"><li>遍历字符串</li></ol><ul><li>遍历字符串，每次将右边界 <code>right</code> 向右移动一位</li><li>检查当前字符是否已经在窗口中出现过，如果出现过，更新左边界 <code>left</code></li><li>更新当前字符的最新位置</li><li>更新最长子串的长度</li></ul><ol start="3"><li>返回结果</li></ol><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 左边界</span></span>
<span class="line">  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 最长子串的长度</span></span>
<span class="line">  <span class="token keyword">const</span> charIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于记录字符的最新位置</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> char <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 当前字符</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果字符已经在窗口中出现过，更新左边界</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>charIndex<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> charIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 更新当前字符的最新位置</span></span>
<span class="line">    charIndex<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 更新最长子串的长度</span></span>
<span class="line">    maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,20))])}const v=e(r,[["render",d],["__file","3.html.vue"]]),h=JSON.parse('{"path":"/blogs/algorithm/leetcode/3.html","title":"LeetCode 「中等」3.无重复字符的最长子串","lang":"zh-CN","frontmatter":{"title":"LeetCode 「中等」3.无重复字符的最长子串","date":"2025-2-14","editLink":false,"tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解答","slug":"解答","link":"#解答","children":[{"level":3,"title":"滑动窗口","slug":"滑动窗口","link":"#滑动窗口","children":[]}]}],"git":{"createdTime":1739535321000,"updatedTime":1743063936000,"contributors":[{"name":"sanki","email":"sanqi_3737@163.com","commits":7},{"name":"sankigan","email":"sankigan@tencent.com","commits":3}]},"filePathRelative":"blogs/algorithm/leetcode/3.md"}');export{v as comp,h as data};
